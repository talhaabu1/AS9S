generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//@ user model 
model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  foundItem FoundItem[]
  claim     Claim[]
  profile   UserProfile?

  @@map("users")
}

//@ catagory model
model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  foundItem FoundItem[]

  @@map("catagories")
}

//@ foundItem model
model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  foundItemName String
  description   String
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  claim         Claim[]

  user     User              @relation(fields: [userId], references: [id]) // onet to many relation
  category FoundItemCategory @relation(fields: [categoryId], references: [id]) // onet to many relation

  @@map("foundItems")
}

//@ enum claim status
enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

//@ claim model 
model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 ClaimStatus @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt()

  user      User      @relation(fields: [userId], references: [id]) // one to many relation
  foundItme FoundItem @relation(fields: [foundItemId], references: [id]) // one to many relation

  @@map("claims")
}

//@ profile model
model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id]) // one to one relation

  @@map("profiles")
}
