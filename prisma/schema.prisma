generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//@ user model 
model User {
  id        String      @id @default(uuid())
  username  String      @unique
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  foundItem FoundItem[]
  claim     Claim[]

  @@map("users")
}

//@ catagory model
model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  foundItem FoundItem[]

  @@map("catagories")
}

//@ foundItem model
model FoundItem {
  id          String   @id @default(uuid())
  userId      String
  categoryId  String
  description String
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  claim       Claim[]

  user     User              @relation(fields: [userId], references: [id]) // onet to many relation
  category FoundItemCategory @relation(fields: [categoryId], references: [id]) // onet to many relation

  @@map("foundItems")
}

model LostItem {
  id          String   @id @default(uuid())
  userId      String
  categoryId  String
  location    String
  date        DateTime
  number      String
  image       String
  description String
  asFound     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

//@ enum claim status
enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

//@ claim model 
model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 ClaimStatus @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt()

  user      User      @relation(fields: [userId], references: [id]) // one to many relation
  foundItem FoundItem @relation(fields: [foundItemId], references: [id]) // one to many relation

  @@map("claims")
}
