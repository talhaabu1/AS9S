import { catchAsync, pick, sendResponse } from '@/utils';
import { AllOperationService } from './allOperation.service';
import httpStatus from 'http-status';
import { TUser } from '@/types';
import { optionFilterName, queryFilterName } from './allOperation.constant';

//? user registration controller‚§µ
const userRegistration = catchAsync(async (req, res) => {
  const result = await AllOperationService.userRegistrationIntoDB(req.body);
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è User registered successfully ‚úÖ',
    data: result,
  });
});
//? user registration controller‚§¥

//? user login controller‚§µ
const userLogin = catchAsync(async (req, res) => {
  const result = await AllOperationService.userLoginFormDB(req.body);
  sendResponse(res, {
    statusCode: httpStatus.OK,
    success: true,
    message: 'üñãÔ∏è User logged in successfully ‚úÖ',
    data: result,
  });
});
//? user login controller‚§¥

//? create category controller‚§µ
const createCategory = catchAsync(async (req, res) => {
  const result = await AllOperationService.createCategoryIntoDB(
    req.body,
    req.user as TUser
  );
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è Found item category created successfully ‚úÖ',
    data: result,
  });
});
//? create category controller‚§¥

//? get all categories controller‚§µ
const getAllCategories = catchAsync(async (req, res) => {
  const result = await AllOperationService.getAllCategoriesFormDB();
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è Get All Categories successfully ‚úÖ',
    data: result,
  });
});
//? get all categories controller‚§¥

//? create category controller‚§µ
const createFoundItem = catchAsync(async (req, res) => {
  const result = await AllOperationService.createFoundItemIntoDB(
    req.body,
    req.user as TUser
  );
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è Found item reported successfully ‚úÖ',
    data: result,
  });
});
//? create category controller‚§¥

//? get all found items controller‚§µ
const getAllFoundItems = catchAsync(async (req, res) => {
  //? check query parameters‚§µ
  const query = pick(req.query, queryFilterName);
  const options = pick(req.query, optionFilterName);
  //? check query parameters‚§¥
  const { meta, data } = await AllOperationService.getAllFoundItemsFormDB(
    query,
    options
  );
  sendResponse(res, {
    statusCode: httpStatus.OK,
    success: true,
    message: 'üñãÔ∏è Found items retrieved successfully ‚úÖ',
    meta,
    data,
  });
});
//? get all found items controller‚§¥

//? create lost item controller‚§µ
const createLostItem = catchAsync(async (req, res) => {
  const result = await AllOperationService.createLostItemIntoDB();
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è Lost item created successfully ‚úÖ',
    data: result,
  });
});
//? create lost item  controller‚§¥
//? create claim controller‚§µ
const createClaim = catchAsync(async (req, res) => {
  const result = await AllOperationService.createClaimIntoDB(
    req.body,
    req.user as TUser
  );
  sendResponse(res, {
    statusCode: httpStatus.CREATED,
    success: true,
    message: 'üñãÔ∏è Claim created successfully ‚úÖ',
    data: result,
  });
});
//? create claim controller‚§¥

//? get claims controller‚§µ
const getAllClaims = catchAsync(async (req, res) => {
  const result = await AllOperationService.getAllClaimsFormDB(
    req.user as TUser
  );
  sendResponse(res, {
    statusCode: httpStatus.OK,
    success: true,
    message: 'üñãÔ∏è Claims retrieved successfully ‚úÖ',
    data: result,
  });
});
//? get claims controller‚§¥

//? update claim controller‚§µ
const updateClaim = catchAsync(async (req, res) => {
  //? claim id form params
  const { claimId } = req.params;
  const result = await AllOperationService.updateClaimIntoDB(
    claimId,
    req.body,
    req.user as TUser
  );
  sendResponse(res, {
    statusCode: httpStatus.OK,
    success: true,
    message: 'üñãÔ∏è Claim updated successfully ‚úÖ',
    data: result,
  });
});
//? update claim controller‚§¥

//? get my profile controller‚§µ
// const getMyProfile = catchAsync(async (req, res) => {
//   const result = await AllOperationService.getMyProfileFormDB(
//     req.user as TUser
//   );
//   sendResponse(res, {
//     statusCode: httpStatus.OK,
//     success: true,
//     message: 'üñãÔ∏è Profile retrieved successfully ‚úÖ',
//     data: result,
//   });
// });
// //? get my profile controller‚§¥

// //? update my profile controller‚§µ
// const updateMyProfile = catchAsync(async (req, res) => {
//   const result = await AllOperationService.updateMyProfileIntoDB(
//     req.body,
//     req.user as TUser
//   );
//   sendResponse(res, {
//     statusCode: httpStatus.OK,
//     success: true,
//     message: 'üñãÔ∏è User profile updated successfully ‚úÖ',
//     data: result,
//   });
// });
//? update my profile controller‚§¥

export const AllOperationController = {
  userRegistration,
  userLogin,
  createCategory,
  createFoundItem,
  getAllFoundItems,
  createClaim,
  getAllClaims,
  updateClaim,
  createLostItem,
  getAllCategories,
  // getMyProfile,
  // updateMyProfile,
};
